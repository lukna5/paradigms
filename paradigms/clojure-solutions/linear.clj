(defn operate [op] #(mapv op %1 %2))
(def v+ (operate +))
(def v- (operate -))
(def v* (operate *))
(def vd (operate /))
(defn v*s [v, s] (mapv #(* s %1) v))
(defn scalar [v1 v2] (apply + (v* v1 v2)))
(defn getMat [v1 v2 s1 s2] (- (* (nth v1 s1) (nth v2 s2))
                              (* (nth v1 s2) (nth v2 s1))))
(defn vect [v1, v2] (vector (getMat v1 v2 1 2)
                            (getMat v1 v2 2 0)
                            (getMat v1 v2 0 1)))
(defn transpose [m] (apply mapv vector m))
(def m+ (operate v+))
(def m- (operate v-))
(def m* (operate v*))
(def md (operate vd))
(defn m*v [m v] (mapv #(scalar %1 v) m))
(defn m*s [m s] (mapv #(v*s %1 s) m))
(defn m*m [m1 m2] (mapv #(m*v (transpose m2) %1) m1))
(def c+ (operate m+))
(def c- (operate m-))
(def c* (operate m*))
(def cd (operate md))

